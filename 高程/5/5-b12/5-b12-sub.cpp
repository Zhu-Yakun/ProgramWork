/* 信19 2252085 朱亚琨 */
#include <iostream>
#include <cstdio>
#include <conio.h>
using namespace std;

/* 函数实现部分，{ }内的东西可以任意调整，目前的return 0只是一个示例，可改变 */

/* 不允许定义任何形式的外部全局、静态全局、宏定义、只读变量 */

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlen(const char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int len;
	for(len = 0;; len++)
		if(str[len] == '\0')
			break;

    return len; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcat(char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int len1, len2;
    len1 = tj_strlen(s1);
	len2 = tj_strlen(s2);
	for(int i = 0, j = len1; i <= len2; i++, j++)
		s1[j] = s2[i];

    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncat(char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int len1, len2;
    len1 = tj_strlen(s1);
	len2 = tj_strlen(s2);
	for(int i = 0, j = len1; i < len && i <= len2; i++, j++)
		s1[j] = s2[i];
	if(len < len2)
		s1[len1+len] = '\0';

    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcpy(char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int len2;
	len2 = tj_strlen(s2);
	for(int i = 0; i <= len2; i++)
		s1[i] = s2[i];

    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncpy(char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int len2;
	len2 = tj_strlen(s2);
	for(int i = 0; i < len && i < len2; i++)
		s1[i] = s2[i];

    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcmp(const char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while(1)
    {
    	if(s1[i] == '\0' || s2[i] == '\0' || s1[i] != s2[i])
    		break;
    	i++;
	}

    return s1[i] - s2[i]; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasecmp(const char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while(1)
    {
    	if(s1[i] != s2[i])
    	{ 
    		if(s1[i] >= 'A' && s1[i] <= 'Z')
    		{
    			if(s2[i] >= 'A' && s2[i] <= 'Z')
    			{
    				if(s1[i] - s2[i] != 0)
    					return s1[i] - s2[i];
				}
    			else if(s2[i] >= 'a' && s2[i] <= 'z')
    			{
    				if(s1[i] + 32 - s2[i] != 0)
    					return s1[i] + 32 - s2[i];
				}
				else
					return s1[i] + 32 - s2[i];
			}
			else if(s2[i] >= 'A' && s2[i] <= 'Z')
			{
				if(s1[i] - s2[i] - 32 != 0)
					return s1[i] - 32 - s2[i];
			}
			else
				break;
		}
    	if(s1[i] == '\0' || s2[i] == '\0')
    		break;
    	i++;
	}

    return s1[i] - s2[i]; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncmp(const char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int len1, len2;
    bool flag = 1;
    len1 = tj_strlen(s1);
	len2 = tj_strlen(s2);
	int tmp = (len1 < len2 ? len1 : len2);
	int min = (len > tmp ? tmp + 1 : len);
    int i = 0;
    while(i < min)
    {
    	if(s1[i] == '\0' || s2[i] == '\0' || s1[i] != s2[i])
    	{
    		flag = 0;
    		break;
		}
    	i++;
	}
	if(flag)
		i--;

    return s1[i] - s2[i]; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasencmp(const char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int len1, len2;
    len1 = tj_strlen(s1);
    len2 = tj_strlen(s2);
    int tmp = len1 < len2 ? len1 : len2;
    int min = len > tmp ? tmp + 1 : len;
    int i = 0;
    while (i < min)
    {
        if (s1[i] != s2[i])
        {
            if (s1[i] >= 'A' && s1[i] <= 'Z')
            {
                if (s2[i] >= 'A' && s2[i] <= 'Z')
                {
                    if (s1[i] - s2[i] != 0)
                        return s1[i] - s2[i];
                }
                else if (s2[i] >= 'a' && s2[i] <= 'z')
                {
                    if (s1[i] + 32 - s2[i] != 0)
                        return s1[i] + 32 - s2[i];
                }
                else
                    return s1[i] + 32 - s2[i];
            }
            else if (s2[i] >= 'A' && s2[i] <= 'Z')
            {
                if (s1[i] - s2[i] - 32 != 0)
                    return s1[i] - 32 - s2[i];
            }
            else
                break;
        }
        if (s1[i] == '\0' || s2[i] == '\0')
            break;
        i++;
    }
    if (i == min) {
        i--;
        if (s1[i] != s2[i])
        {
            if (s1[i] >= 'A' && s1[i] <= 'Z')
            {
                if (s2[i] >= 'A' && s2[i] <= 'Z')
                    return s1[i] - s2[i];
                else
                    return s1[i] + 32 - s2[i];
            }
            else if (s2[i] >= 'A' && s2[i] <= 'Z')
                return s1[i] - 32 - s2[i];
        }
    }

    return s1[i] - s2[i]; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strupr(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while (str[i] != '\0')
    {
        if (str[i] >= 'a' && str[i] <= 'z')
            str[i] -= 32;
        i++;
    }

    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlwr(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while(str[i] != '\0')
    {
    	if(str[i] >= 'A' && str[i] <= 'Z')
    		str[i] += 32;
    	i++;
	}
    
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strchr(const char str[], char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while(str[i] != '\0')
    {
    	if(str[i] == ch)
    		return i + 1;
    	i++;
	}

    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strstr(const char str[], const char substr[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if(substr == "")
    	return 0;
    int p = 0;
    while(str[p])
    {
    	int s1 = p, s2 = 0;
    	while(str[s1] && substr[s2] && (str[s1] == substr[s2]))
    	{
    		s1++;
    		s2++;
		}
		if(substr[s2] == '\0')
			return (p + 1);
		p++;
	}

    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrchr(const char str[], const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = tj_strlen(str) - 1;
    while(i >= 0)
    {
    	if(str[i] == ch)
    		return i + 1;
    	i--;
	}

    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrstr(const char str[], const char substr[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if(substr == "")
    	return 0;
    int p = tj_strlen(str) - 1;
    while(str[p])
    {
    	int s1 = p, s2 = strlen(substr) - 1, len2 = s2;
    	while(str[s1] && substr[s2] && (str[s1] == substr[s2]))
    	{
    		s1--;
    		s2--;
		}
		if(substr[s2] == 0)
			return (p + 1 - len2);
		p--;
	}

    return 0; //return值可根据需要修改
}
/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrev(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if(str == "")
    	return 0;
    int h = 0, t = tj_strlen(str) - 1;
    char ch;
    while(h < t)
    {
    	ch = str[h];
    	str[h++] = str[t];
    	str[t--] = ch;
	}

    return 0; //return值可根据需要修改
}
