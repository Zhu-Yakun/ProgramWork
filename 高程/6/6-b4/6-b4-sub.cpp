/* 2252085 朱亚琨 信19 */

#include <cstdio>   //NULL
//不再允许包含任何系统头文件

/* ----- 不允许定义任何形式的全局变量/全部数组/只读全局变量/宏定义!!!!! ----- */

/* 函数实现部分，{ }内的东西可以任意调整，目前的return只是一个示例，可改变 */
/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlen(const char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    const char *p = str;
    if (str == NULL)
        return 0;
    while (*p++ != 0)
        ;
    return p - str -1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strcat(char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* p1 = s1;
    const char* p2 = s2;
    if (s1 == NULL)
        return NULL;
    if(s2 == NULL)
        return s1;
    while (*p1 != 0)
        p1++;
    while ((*p1++ = *p2++) != 0)
        ;

    return s1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strncat(char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* p1 = s1;
    const char* p2 = s2;
    if (s1 == NULL)
        return NULL;
    if (s2 == NULL)
        return s1;
    while (*p1 != 0)
        p1++;
    while ((*p1++ = *p2++) != 0 && p2 - s2 < len)
        ;

    return s1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strcpy(char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL)
        return NULL;
    if (s2 == NULL)
    {
        *s1 = 0;
        return s1;
    }
    char* p1 = s1;
    const char* p2 = s2;
    while ((*p1++ = *p2++) != 0)
        ;

    return s1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strncpy(char *s1, const char *s2, const int len)
{
    if (s1 == NULL)
        return NULL;
    if (s2 == NULL)
        return s1;
    char* p1 = s1;
    const char* p2 = s2;
    while (*p2 != 0 && p2 - s2 < len)
        *p1++ = *p2++;
    return s1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcmp(const char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL && s2 == NULL)
        return 0;
    if (s1 == NULL && s2 != NULL)
        return -1;
    if (s2 == NULL && s1 != NULL)
        return 1;
    const char* p1 = s1;
    const char* p2 = s2;
    while (1)
    {
        if (!*p1 || !*p2 || *p1 != *p2)
            break;
        p1++;
        p2++;
    }

    return *p1 - *p2;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasecmp(const char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL && s2 == NULL)
        return 0;
    if (s1 == NULL && s2 != NULL)
        return -1;
    if (s2 == NULL && s1 != NULL)
        return 1;
    const char* p1 = s1;
    const char* p2 = s2;
    char ch1, ch2;
    while (1)
    {
        if (!*p1 && *p1 == *p2)
            break;
        if (*p1 != *p2)
        {
            if (*p1 >= 'A' && *p1 <= 'Z')
                ch1 = *p1 + 32;
            else
                ch1 = *p1;
            if (*p2 >= 'A' && *p2 <= 'Z')
                ch2 = *p2 + 32;
            else
                ch2 = *p2;
            if (ch1 != ch2)
                return ch1 - ch2;
        }
        p1++;
        p2++;
    }

    return *p1 - *p2;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncmp(const char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL && s2 == NULL)
        return 0;
    if (s1 == NULL && s2 != NULL)
        return -1;
    if (s2 == NULL && s1 != NULL)
        return 1;
    const char* p1 = s1;
    const char* p2 = s2;
    bool flag = 1;
    while (p1 - s1 < len)
    {
        if (!*p1 || !*p2 || *p1 != *p2)
        {
            flag = 0;
            break;
        }
        p1++;
        p2++;
    }
    if (flag)
    {
        p1--;
        p2--;
    }

    return *p1 - *p2;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasencmp(const char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL && s2 == NULL)
        return 0;
    if (s1 == NULL && s2 != NULL)
        return -1;
    if (s2 == NULL && s1 != NULL)
        return 1;
    const char* p1 = s1;
    const char* p2 = s2;
    bool flag = 1;
    char ch1, ch2;
    while (p1 - s1 < len)
    {
        if (!*p1 && *p1 == *p2)
        {
            flag = 0;
            break;
        }
        if (*p1 != *p2)
        {
            if (*p1 >= 'A' && *p1 <= 'Z')
                ch1 = *p1 + 32;
            else
                ch1 = *p1;
            if (*p2 >= 'A' && *p2 <= 'Z')
                ch2 = *p2 + 32;
            else
                ch2 = *p2;
            if (ch1 != ch2)
                return ch1 - ch2;
        }
        p1++;
        p2++;
    }
    if (p1 - s1 == len)
        return 0;

    return *p1 - *p2;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strupr(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* p = str;
    if (str == NULL)
        return NULL;
    while (*p != 0)
    {
        if (*p >= 'a' && *p <= 'z')
            *p -= 32;
        p++;
    }
    return str;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strlwr(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* p = str;
    if (str == NULL)
        return NULL;
    while (*p != 0)
    {
        if (*p >= 'A' && *p <= 'Z')
            *p += 32;
        p++;
    }
    return str;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strchr(const char *str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    const char* p = str;
    if (str == NULL)
        return 0;
    while (*p != 0)
    {
        if (*p == ch)
            return p - str + 1;
        p++;
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strstr(const char *str, const char *substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    const char* p = str;
    if (str == NULL || substr == NULL)
        return 0;
    while (*p != 0)
    {
        const char* p1 = p, * p2 = substr;
        while (*p1 && *p2 && (*p1 == *p2))
        {
            p1++;
            p2++;
        }
        if (*p2 == '\0')
            return (p - str + 1);
        p++;
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrchr(const char *str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    const char* p = str;
    if (str == NULL)
        return 0;
    while (*p != 0)
        p++;
    while (p >= str)
    {
        if (*p == ch)
            return p - str + 1;
        p--;
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrstr(const char *str, const char *substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    const char* p = str;
    if (str == NULL || substr == NULL)
        return 0;
    if (substr == "")
        return 0;
    while (*p != 0)
        p++;
    p--;
    while (p >= str)
    {
        const char* p1 = p, * p2 = substr;
        while (*p2 != 0)
            p2++;
        p2--;
        while (*p1 == *p2 && p2 >= substr)
        {
            p1--;
            p2--;
        }
        if (++p2 == substr)
            return (p1 - str + 2);
        p--;
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strrev(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL)
        return NULL;
    if (str == "")
        return 0;
    char* h = str, * t = str;
    while (*t != 0)
        t++;
    t--;
    char ch;
    while (h < t)
    {
        ch = *h;
        *h++ = *t;
        *t-- = ch;
    }

    return str;
}
